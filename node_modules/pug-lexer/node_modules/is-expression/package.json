{
  "_args": [
    [
      {
        "raw": "is-expression@^3.0.0",
        "scope": null,
        "escapedName": "is-expression",
        "name": "is-expression",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "/home/psinghal/fileupload/node_modules/pug-lexer"
    ]
  ],
  "_from": "is-expression@>=3.0.0 <4.0.0",
  "_id": "is-expression@3.0.0",
  "_inCache": true,
  "_location": "/pug-lexer/is-expression",
  "_nodeVersion": "6.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/is-expression-3.0.0.tgz_1473638606404_0.5194024990778416"
  },
  "_npmUser": {
    "name": "timothygu",
    "email": "timothygu99@gmail.com"
  },
  "_npmVersion": "3.10.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "is-expression@^3.0.0",
    "scope": null,
    "escapedName": "is-expression",
    "name": "is-expression",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pug-lexer"
  ],
  "_resolved": "https://registry.npmjs.org/is-expression/-/is-expression-3.0.0.tgz",
  "_shasum": "39acaa6be7fd1f3471dc42c7416e61c24317ac9f",
  "_shrinkwrap": null,
  "_spec": "is-expression@^3.0.0",
  "_where": "/home/psinghal/fileupload/node_modules/pug-lexer",
  "author": {
    "name": "Timothy Gu",
    "email": "timothygu99@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/pugjs/is-expression/issues"
  },
  "dependencies": {
    "acorn": "~4.0.2",
    "object-assign": "^4.0.1"
  },
  "description": "Check if a string is a valid JavaScript expression",
  "devDependencies": {
    "istanbul": "*",
    "testit": "^2.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "39acaa6be7fd1f3471dc42c7416e61c24317ac9f",
    "tarball": "https://registry.npmjs.org/is-expression/-/is-expression-3.0.0.tgz"
  },
  "gitHead": "fc635340548d1114707497e39babe8dc476326c8",
  "homepage": "https://github.com/pugjs/is-expression#readme",
  "keywords": [
    "javascript",
    "expression"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "forbeslindesay",
      "email": "forbes@lindesay.co.uk"
    },
    {
      "name": "timothygu",
      "email": "timothygu99@gmail.com"
    }
  ],
  "name": "is-expression",
  "optionalDependencies": {},
  "readme": "# is-expression\n\nValidates a string as a JavaScript expression\n\n[![Build Status](https://img.shields.io/travis/pugjs/is-expression/master.svg)](https://travis-ci.org/pugjs/is-expression)\n[![Dependency Status](https://img.shields.io/david/pugjs/is-expression.svg)](https://david-dm.org/pugjs/is-expression)\n[![npm version](https://img.shields.io/npm/v/is-expression.svg)](https://www.npmjs.org/package/is-expression)\n\n## Installation\n\n    npm install is-expression\n\n## Usage\n\n### `isExpression(src[, options])`\n\nValidates a string as a JavaScript expression.\n\n`src` contains the source.\n\n`options` can contain any Acorn options (since we use Acorn under-the-hood),\nor any of the following:\n\n- `throw`: Throw an error if the string is not an expression. The error can\n  be an Acorn error, with location information in `err.loc` and `err.pos`.\n  Defaults to `false`.\n- `strict`: Use strict mode when trying to parse the string. Defaults to\n  `false`. Even if this option is `false`, if you have provided\n  `options.sourceType === 'module'` which imples strict mode under ES2015,\n  strict mode will be used.\n- `lineComment`: When `true`, allows line comments in the expression.\n  Defaults to `false` for safety.\n\nSee the examples below for usage.\n\n## Examples\n\n```js\nvar isExpression = require('is-expression')\n\nisExpression('myVar')\n//=> true\nisExpression('var')\n//=> false\nisExpression('[\"an\", \"array\", \"\\'s\"].indexOf(\"index\")')\n//=> true\n\nisExpression('var', {throw: true})\n// SyntaxError: Unexpected token (1:0)\n//     at Parser.pp.raise (acorn/dist/acorn.js:940:13)\n//     at ...\n\nisExpression('public')\n//=> true\nisExpression('public', {strict: true})\n//=> false\n\nisExpression('abc // my comment')\n//=> false\nisExpression('abc // my comment', {lineComment: true})\n//=> true\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pugjs/is-expression.git"
  },
  "scripts": {
    "coverage": "istanbul cover test.js",
    "test": "node test && npm run coverage"
  },
  "version": "3.0.0"
}
